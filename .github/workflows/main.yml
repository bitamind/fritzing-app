# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the develop branch
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: .

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release
  BOOST_ROOT: ${{github.workspace}}
  BOOST_URL: https://sourceforge.net/projects/boost/files/boost/1.78.0/boost_1_78_0.7z/download
  LIBGIT2_URL: https://github.com/libgit2/libgit2/archive/refs/tags/v0.28.4.zip
  QT_VERSION: 5.12.7

permissions:
  contents: read

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-2016

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v3
      with:
        ref: develop
        submodules: recursive

    # Runs a single command using the runners shell
    #- name: Run a one-line script
    #  run: echo Hello, world!

    # Runs a set of commands using the runners shell
    #- name: Run a multi-line script
    #  run: |
    #    echo Add other actions to build,
    #    echo test, and deploy your project.

    #- name: Add MSBuild to PATH
    #  uses: microsoft/setup-msbuild@v1.1

    #- name: Restore NuGet packages
    #  working-directory: ${{env.GITHUB_WORKSPACE}}
    #  run: nuget restore ${{env.SOLUTION_FILE_PATH}}

    - name: Restore Boost cache
      uses: actions/cache@v2
      id: cache-boost
      with:
        path: ${{env.BOOST_ROOT}}
        key: boost

    - name: Install Boost
      if: steps.cache-boost.outputs.cache-hit != 'true'
      run: |
        if [ "$OS" == "Windows_NT" ]; then
          # fix up paths to be forward slashes consistently
          BOOST_ROOT=$(echo $BOOST_ROOT | sed 's/\\/\//g')
        fi
        mkdir -p $BOOST_ROOT
        curl --progress-bar --location --output $BOOST_ROOT/download.7z $BOOST_URL
        7z -o$BOOST_ROOT x $BOOST_ROOT/download.7z -y -bd
        rm download.7z
      shell: bash

    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        version: ${{env.QT_VERSION}}
        host: 'windows'

    - name: Build libgit2
      run: |
        cd ..
        git clone --depth 1 https://github.com/libgit2/libgit2 -b v0.28.5
        mkdir libgit2/build64
        cd libgit2/build64
        cmake .. -G "Visual Studio 15 2017" -A x64 -DBUILD_CLAR=OFF
        cmake --build . --config Release
      shell: bash

    - name: Update the translations files
      run: |
        lupdate -noobsolete phoenix.pro
        lrelease -removeidentical phoenix.pro
      shell: bash

    - name: Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        cd ..
        set QTBIN=%CD%\${{env.QT_VERSION}}\msvc2017_64\bin
        .\fritzing-app\tools\release_fritzing.bat 64 2017

    - name: ls for Build
      run: ls

    # Upload package: https://github.com/marketplace/actions/upload-artifact
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: Fritzing build
        path: fritzing.*.pc.zip
